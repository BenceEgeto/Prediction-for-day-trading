import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt

# 1. Adat betöltése + előkészítés
file_path = 'doge_dataset(15min)'  
df = pd.read_excel("/content/doge_dataset(15min).xlsx")

data = df['close'].values #kicserélhető másik oszlopra is

# Adatok normalizálása [0, 1] tartományra
scaler = MinMaxScaler(feature_range=(0, 1))
data_scaled = scaler.fit_transform(data.reshape(-1, 1)).flatten()

# Szegmensek (1 órás vektorok) készítése
lookback = 4  # 4*15 perc = 1 óra
X = []
y = []

for i in range(len(data_scaled) - lookback):
    X.append(data_scaled[i:i+lookback])  # Az 1 órás vektor
    y.append(data_scaled[i+lookback])   # A következő 15 perces érték

X = np.array(X)
y = np.array(y)

# Az alakzatot átalakítása LSTM-hez
X = X.reshape((X.shape[0], X.shape[1], 1))

# 2. Modell létrehozása
model = Sequential()
model.add(LSTM(64, activation='relu', input_shape=(lookback, 1)))
model.add(Dense(1))  # egy értéket jósol

model.compile(optimizer='adam', loss='mse')
model.summary()

# 3. Modell tanítása
epochs = 50 #túl sok -> overfitting 
batch_size = 32 #(32 kb jó, felette már nagy)
history = model.fit(X, y, epochs=epochs, batch_size=batch_size, validation_split=0.2)

# 4. Előrejelzés a meglévő adatokon
predictions = model.predict(X)

# Az eredeti skálára visszatranszformáljuk az előrejelzéseket és az adatokat
data_inverse = scaler.inverse_transform(data_scaled.reshape(-1, 1))
predictions_inverse = scaler.inverse_transform(predictions)

# 5. Eredmény
plt.figure(figsize=(14, 7))
plt.plot(data_inverse, label="Valódi adatok")
plt.plot(range(lookback, len(predictions_inverse) + lookback), predictions_inverse, label="Előrejelzés")
plt.legend()
plt.title("Valódi adatok és előrejelzés")
plt.show()

# 6. Jövőbeli értékek előrejelzése
def predict_future_lstm(model, data, scaler, lookback, steps):
    last_sequence = data[-lookback:]  # Az utolsó 1 órás szegmens
    predictions = []

    for _ in range(steps):
        input_data = last_sequence.reshape((1, lookback, 1))
        predicted_value = model.predict(input_data)[0][0]
        predictions.append(predicted_value)
        last_sequence = np.append(last_sequence[1:], predicted_value)

    return scaler.inverse_transform(np.array(predictions).reshape(-1, 1)).flatten()

future_steps = 10  # Következő 10 x 15 perc előrejelzése
future_predictions = predict_future_lstm(model, data_scaled, scaler, lookback, future_steps)

# Eredmények megjelenítése
plt.figure(figsize=(14, 7))
plt.plot(range(len(data_inverse)), data_inverse, label="Valódi adatok")
plt.plot(range(len(data_inverse), len(data_inverse) + future_steps), future_predictions, label="Előrejelzés (jövő)", linestyle="--")
plt.legend()
plt.title("Jövőbeli értékek előrejelzése")
plt.show()

#model.save
model.save('buy_or_short.keras')
